@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Kertu.InteractiveServer.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<div class="w-100 h-100 d-flex justify-content-center align-items-center">
    <RadzenCard class="rz-my-12 rz-p-4 rz-p-md-12" style="max-width: 400px; width: 100%;">
        <div class="rz-login">
            <EditForm Model="Input" method="post" OnValidSubmit="RegisterUser" FormName="register" class="rz-form w-100">
                <DataAnnotationsValidator />

                <RadzenAlert Visible=@(!string.IsNullOrEmpty(Message)) AlertStyle="AlertStyle.Danger" ShowIcon="false" AllowClose="false" Variant="Variant.Flat" Shade="Shade.Lighter">
                    @Message
                </RadzenAlert>

                <!-- Email Field -->
                <div class="rz-form-row w-100">
                    <label for="email" class="rz-label">Email</label>
                    <div class="rz-form-input-wrapper w-100">
                        <InputText @bind-Value="Input.Email" class="rz-textbox w-100" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>
                </div>

                <!-- Password Field -->
                <div class="rz-form-row w-100">
                    <label for="password" class="rz-label">Password</label>
                    <div class="rz-form-input-wrapper w-100">
                        <InputText type="password" @bind-Value="Input.Password" class="rz-textbox w-100" autocomplete="new-password" aria-required="true" placeholder="password" />
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>
                </div>

                <!-- Confirm Password Field -->
                <div class="rz-form-row w-100">
                    <label for="confirm-password" class="rz-label">Confirm Password</label>
                    <div class="rz-form-input-wrapper w-100">
                        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="rz-textbox w-100" autocomplete="new-password" aria-required="true" placeholder="password" />
                        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                    </div>
                </div>

                <!-- Register Button -->
                <div class="rz-form-row w-100 d-flex justify-content-center">
                    <label class="rz-label"></label>
                    <div class="rz-form-input-wrapper rz-login-buttons w-100 d-flex justify-content-between">
                        <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Text="REGISTER" class="w-100" style="max-width: 300px;" />
                    </div>
                </div>
            </EditForm>

            <!-- Already Have an Account Section -->
            <div class="rz-login text-center mt-3 w-100">
                <div class="d-flex justify-content-between align-items-center w-100">
                    <span>Already have an account?</span>
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                        <RadzenButton ButtonType="ButtonType.Button" Variant="Variant.Flat" ButtonStyle="ButtonStyle.Secondary" Shade="Shade.Lighter" Text="LOG IN" class="mt-2" />
                    </a>
                </div>
            </div>
        </div>
    </RadzenCard>
</div>




@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser()
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
