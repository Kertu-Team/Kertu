@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Kertu.InteractiveServer.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="area">
    <ul class="circles">
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
    </ul>
</div>

<div class="container">
    <div class="card shadow border-0 rounded">
        <div class="card-header bg-primary text-white text-center">
            <h4 class="mb-0">Log in to Your Account</h4>
            <small>Please enter your credentials</small>
        </div>
        <div class="card-body">
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser">
                <DataAnnotationsValidator />

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger text-center">
                        @errorMessage
                    </div>
                }

                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" id="email" placeholder="Email" />
                    <label for="email">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" id="password" placeholder="Password" />
                    <label for="password">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>

                <div class="mb-3 d-flex justify-content-between align-items-center">
                    <div>
                        <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" id="remember-me" />
                        <label for="remember-me" class="form-check-label">Remember me</label>
                    </div>
                    <a href="Account/ForgotPassword" class="text-primary">Forgot password?</a>
                </div>

                <button type="submit" class="btn btn-primary w-100">Login</button>
            </EditForm>
        </div>
        <div class="card-footer text-center bg-light">
            <span>Don't have an account yet?</span>
            <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="btn btn-link text-primary">
                Sign Up
            </a>
        </div>
    </div>
</div>
<style>
    .container {
        background: linear-gradient(to bottom, #ffffff, #f8f9fa); /* Subtle gradient */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Modern shadow */
        border: none; /* Removes the default border */
        border-radius: 15px; /* Same rounded corners */
        padding: 20px; /* Inner spacing */
        max-width: 600px; /* Same width as the card */
    }

    .custom-left-align {
        margin-left: 0px; /* Adjust as needed */
    }

    .card {
        background: linear-gradient(to bottom, #ffffff, #f8f9fa); /* Subtle gradient */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Modern shadow */
        border: none; /* Removes the default border for a cleaner look */
    }

    .card-header {
        border-radius: 15px 15px 0 0; /* Rounded top corners */
    }
</style>
@code {
    string errorMessage = string.Empty;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
<link rel="stylesheet" href="backgroundforlogin.css">