@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Kertu.InteractiveServer.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<StatusMessage />

<div class="container custom-left-align">
            <div class="card shadow border-0 rounded">
                <div class="card-header bg-primary text-white text-center">
                    <h4 class="mb-0">Manage Your Account</h4>
                    <small>Change your account settings</small>
                </div>
                <div class="card-body">
                    <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />
                        <div class="form-floating mb-3">
                            <input type="text" value="@username" class="form-control" id="username" placeholder="Username" disabled />
                            <label for="username">Username</label>
                        </div>
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.PhoneNumber" class="form-control" id="phone-number" placeholder="Phone Number" />
                            <label for="phone-number">Phone number</label>
                            <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
                        </div>
                        <button type="submit" class="btn btn-primary w-100">Save Changes</button>

                    </EditForm>
                </div>
            </div>
        </div>
<style>
    .container {
        background: linear-gradient(to bottom, #ffffff, #f8f9fa); /* Subtle gradient */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Modern shadow */
        border: none; /* Removes the default border */
        border-radius: 15px; /* Same rounded corners */
        padding: 20px; /* Inner spacing */
        max-width: 500px; /* Same width as the card */
        margin: 50px auto; /* Center align */
        margin-left: 200px;
    }

    .custom-left-align {
        margin-left: 100px; /* Adjust as needed */
    }

    .card {
        background: linear-gradient(to bottom, #ffffff, #f8f9fa); /* Subtle gradient */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Modern shadow */
        border: none; /* Removes the default border for a cleaner look */
    }
</style>


@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}
