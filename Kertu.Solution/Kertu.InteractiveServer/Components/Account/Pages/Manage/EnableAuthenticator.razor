@page "/Account/Manage/EnableAuthenticator"

@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Kertu.InteractiveServer.Data

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject UrlEncoder UrlEncoder
@inject IdentityRedirectManager RedirectManager
@inject ILogger<EnableAuthenticator> Logger

<PageTitle>Configure Authenticator App</PageTitle>

@if (recoveryCodes is not null)
{
    <ShowRecoveryCodes RecoveryCodes="recoveryCodes.ToArray()" StatusMessage="@message" />
}
else
{
    <StatusMessage Message="@message" />

    <div class="container custom-left-align compact-container align-left">
        <div class="card shadow border-0 rounded">
            <div class="card-header bg-primary text-white text-center">
                <h4 class="mb-0">Configure Authenticator App</h4>
                <small class="text-light">Set up your authenticator app in a few steps</small>
            </div>
            <div class="card-body">
                <p class="mb-3 small-text">Follow these steps to set up an authenticator app:</p>
                <div class="mb-3 small-text">
                    <strong>1. Download an authenticator app:</strong>
                    <a href="https://go.microsoft.com/fwlink/?Linkid=825072" class="link">Microsoft Authenticator</a> or
                    <a href="https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8" class="link">Google Authenticator</a>.
                </div>
                <div class="mb-3 small-text">
                    <strong>2. Scan the QR Code or enter this key:</strong>
                    <kbd class="key-box">@sharedKey</kbd>.
                    <div class="alert alert-info compact-alert mt-2">
                        Learn to <a href="https://go.microsoft.com/fwlink/?Linkid=852423" class="link">generate QR codes</a>.
                    </div>
                    <div class="text-center">
                        <img src="@authenticatorUri" alt="QR Code" class="qr-code-image" />
                    </div>
                </div>
                <div class="small-text">
                    <strong>3. Enter the code from your app:</strong>
                    <div class="row justify-content-center mt-2">
                        <div class="col-md-10">
                            <EditForm Model="Input" FormName="send-code" OnValidSubmit="OnValidSubmitAsync" method="post">
                                <DataAnnotationsValidator />
                                <div class="form-floating mb-2">
                                    <InputText @bind-Value="Input.Code" class="form-control compact-input" autocomplete="off" placeholder="Enter code" />
                                    <label for="code">Code</label>
                                    <ValidationMessage For="() => Input.Code" class="text-danger" />
                                </div>
                                <button type="submit" class="btn btn-primary w-100">Verify</button>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
    <style>
        .align-left {
            margin-left: -20px; 
        }
        .compact-container {
            max-width: 700px;
            padding: 15px;
        }

        .card {
            padding: 10px;
        }

        .small-text {
            font-size: 14px;
            line-height: 1.4;
            margin-bottom: 10px;
        }

        .compact-input {
            height: 40px;
            font-size: 14px;
        }

        .key-box {
            background: #f8f9fa;
            padding: 0.2em 0.4em;
            border-radius: 5px;
            font-weight: bold;
            color: #333;
            font-size: 14px;
        }

        .compact-alert {
            font-size: 12px;
            padding: 8px;
        }

        .qr-code-image {
            max-width: 120px;
            height: auto;
            margin: 10px auto;
            display: block;
        }

        .btn-primary {
            padding: 8px 0;
            font-size: 14px;
        }
    </style>


@code {
    private const string AuthenticatorUriFormat = "otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6";

    private string? message;
    private ApplicationUser user = default!;
    private string? sharedKey;
    private string? authenticatorUri;
    private IEnumerable<string>? recoveryCodes;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        await LoadSharedKeyAndQrCodeUriAsync(user);
    }

    private async Task OnValidSubmitAsync()
    {
        // Strip spaces and hyphens
        var verificationCode = Input.Code.Replace(" ", string.Empty).Replace("-", string.Empty);

        var is2faTokenValid = await UserManager.VerifyTwoFactorTokenAsync(
            user, UserManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);

        if (!is2faTokenValid)
        {
            message = "Error: Verification code is invalid.";
            return;
        }

        await UserManager.SetTwoFactorEnabledAsync(user, true);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' has enabled 2FA with an authenticator app.", userId);

        message = "Your authenticator app has been verified.";

        if (await UserManager.CountRecoveryCodesAsync(user) == 0)
        {
            recoveryCodes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);
        }
        else
        {
            RedirectManager.RedirectToWithStatus("Account/Manage/TwoFactorAuthentication", message, HttpContext);
        }
    }

    private async ValueTask LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user)
    {
        // Load the authenticator key & QR code URI to display on the form
        var unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        if (string.IsNullOrEmpty(unformattedKey))
        {
            await UserManager.ResetAuthenticatorKeyAsync(user);
            unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        }

        sharedKey = FormatKey(unformattedKey!);

        var email = await UserManager.GetEmailAsync(user);
        authenticatorUri = GenerateQrCodeUri(email!, unformattedKey!);
    }

    private string FormatKey(string unformattedKey)
    {
        var result = new StringBuilder();
        int currentPosition = 0;
        while (currentPosition + 4 < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition, 4)).Append(' ');
            currentPosition += 4;
        }
        if (currentPosition < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition));
        }

        return result.ToString().ToLowerInvariant();
    }

    private string GenerateQrCodeUri(string email, string unformattedKey)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            AuthenticatorUriFormat,
            UrlEncoder.Encode("Microsoft.AspNetCore.Identity.UI"),
            UrlEncoder.Encode(email),
            unformattedKey);
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Verification Code")]
        public string Code { get; set; } = "";
    }
}
