@using Data
@using Data.KertuElements
@using Microsoft.EntityFrameworkCore

@inject ApplicationDbContext dbContext
@inject Account.IdentityUserAccessor UserAccessor
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager NavigationManager
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService

<RadzenStack class="rz-m-3">
    <RadzenTree Data="@kertuTreeViewItems" @ref=tree Change="OnChange" @bind-Value=@selection ItemContextMenu="TreeItemContextMenu">
        <RadzenTreeLevel TextProperty="Name" ChildrenProperty="Children" HasChildren=@(i => ((KertuTreeViewItem)i).Children.Any() == true)>
            <Template Context="context">
                <RadzenIcon Icon=@((context.Value as KertuTreeViewItem).GetIcon()) />
                <b style="user-select: none;">@context.Text</b>
            </Template>
        </RadzenTreeLevel>
    </RadzenTree>
</RadzenStack>


@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    List<KertuTreeViewItem> kertuTreeViewItems = new();
    RadzenTree tree = new();

    ApplicationUser currentUser;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        HttpContext = httpContextAccessor.HttpContext;
        currentUser = await UserAccessor.GetRequiredUserAsync(HttpContext);

        var items = dbContext.Users.Include(u => u.UserKertuElements).Single(u => u == currentUser).UserKertuElements;
        foreach (var item in items)
        {
            KertuTreeViewItem treeViewItem = new(item);
            var fromDB = dbContext.KertuElements.Where(ke => ke == item);
            treeViewItem.Children = LoadTree(fromDB);
            kertuTreeViewItems.Add(treeViewItem);
        }
    }

    object selection;
    private void OnChange()
    {
        KertuTreeViewItem item = selection as KertuTreeViewItem;
        if (item.KertuElement is KertuCard card)
        {
            NavigationManager.NavigateTo($"/card/{card.Id}", true);
        }
        else if (item.KertuElement is KertuList list)
        {
            //clicked list
        }
        else if (item.KertuElement is KertuBoard board)
        {
            //clicked card board
        }
    }


    void TreeItemContextMenu(TreeItemContextMenuEventArgs args)
    {
        ContextMenuService.Open(args,
        new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Add card", Value = 11, Icon = "post_add" },
                new ContextMenuItem(){ Text = "Add list", Value = 12, Icon = "splitscreen_add" },
                new ContextMenuItem(){ Text = "Add board", Value = 13, Icon = "dashboard_customize" },
                new ContextMenuItem(){ Text = "Rename", Value = 2, Icon = "edit" },
                new ContextMenuItem(){ Text = "Delete", Value = 3, Icon = "delete_forever" },
                                },
        (e) =>
        {
            switch (e.Value)
            {
                case 11:

                    break;

                case 12:

                    break;

                case 13:

                    break;

                case 2:
                    RenameKertuElement((args.Value as KertuTreeViewItem).KertuElement);
                    break;

                case 3:
                    DeleteKertuElement((args.Value as KertuTreeViewItem).KertuElement);
                    break;
            }
        }
     );
    }

    #region menu functions
    private async Task RenameKertuElement(KertuElement element)
    {
        var result = await DialogService.OpenAsync("Rename element", d =>
    @<RadzenStack Gap="1.5rem">
        <RadzenTextBox @bind-Value="element.Name" />
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Ok" Click="() => {dbContext.SaveChanges(); d.Close(null);}" Style="width: 80px;" />
                <RadzenButton Text="Cancel" Click="() => d.Close(null)" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
    );

    }

    private async Task DeleteKertuElement(KertuElement element)
    {
        var result = await DialogService.Confirm($"Are you sure to delete {element.Name} and all of its children?", "Confirm", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No", CloseDialogOnOverlayClick=true, CloseDialogOnEsc=true });

        if(result == true)
        {
            CascadeDelete(dbContext.KertuElements.Where(ke => ke.Id == element.Id));

            NavigationManager.Refresh(true);
        }
    }
    void CascadeDelete(IQueryable<KertuElement> parent)
    {
        List<KertuElement> children = new List<KertuElement>();
        if (parent.First() is KertuList)
        {
            var kertuList = parent.Cast<KertuList>();
            children = kertuList.Include(kl => kl.ChildCards).First().ChildCards.Cast<KertuElement>().ToList();
        }
        else if (parent.First() is KertuBoard)
        {
            var kertuBoard = parent.Cast<KertuBoard>();
            children = kertuBoard.Include(kl => kl.ChildKertuElements).First().ChildKertuElements.Cast<KertuElement>().ToList();
        }

        foreach (var child in children)
        {
            var fromDB = dbContext.KertuElements.Where(ke => ke == child);
            CascadeDelete(fromDB);
        }
        dbContext.Remove(parent.First());
        dbContext.SaveChanges();
    }
    #endregion

    private List<KertuTreeViewItem> LoadTree(IQueryable<KertuElement> parent)
    {
        List<KertuTreeViewItem> list = new List<KertuTreeViewItem>();
        List<KertuElement> children = new List<KertuElement>();
        if (parent.First() is KertuList)
        {
            var kertuList = parent.Cast<KertuList>();
            children = kertuList.Include(kl => kl.ChildCards).First().ChildCards.Cast<KertuElement>().ToList();
        }
        else if (parent.First() is KertuBoard)
        {
            var kertuBoard = parent.Cast<KertuBoard>();
            children = kertuBoard.Include(kl => kl.ChildKertuElements).First().ChildKertuElements.Cast<KertuElement>().ToList();
        }

        foreach (var child in children)
        {
            KertuTreeViewItem item = new(child);
            var fromDB = dbContext.KertuElements.Where(ke => ke == child);
            item.Children = LoadTree(fromDB);
            list.Add(item);
        }

        return list;
    }

}
