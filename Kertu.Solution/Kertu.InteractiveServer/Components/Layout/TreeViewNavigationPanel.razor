@using Data
@using Data.Models
@using Kertu.InteractiveServer.Data.Models.Elements
@using Microsoft.EntityFrameworkCore

@inject ApplicationDbContext dbContext
@inject Account.IdentityUserAccessor UserAccessor
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager NavigationManager
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService
@inject Services.UserStateService UserStateService

<div style="display: flex;
            flex-direction: column;
            height: 100%;">
    <RadzenStack class="rz-m-3">
        <RadzenTree Data="@_treeViewItems" @ref=_tree Change="OnChange" @bind-Value=@_selection ItemContextMenu="TreeItemContextMenu">
            <RadzenTreeLevel TextProperty="Name" ChildrenProperty="Children" HasChildren=@(i => ((TreeViewItem)i).Children.Any() == true) Expanded="@ShouldExpand">
                <Template Context="context">
                    <RadzenIcon Icon=@((context.Value as TreeViewItem).GetIcon()) />
                    <b style="user-select: none;">@context.Text</b>
                </Template>
            </RadzenTreeLevel>

        </RadzenTree>
    </RadzenStack>

    <div @oncontextmenu=@(args => NavigationPanelContextMenu(args))
        @oncontextmenu:preventDefault="true"
        style="flex: 1 1 auto;">
    </div>
</div>
@code {

    #region menu functions
    private async Task RenameElement(Element element)
    {
        var result = await DialogService.OpenAsync("Rename element", d =>
    @<RadzenStack Gap="1.5rem">
        <RadzenTextBox @bind-Value="element.Name" />
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Ok" Click="() => {dbContext.SaveChanges(); d.Close(null);}" Style="width: 80px;" />
                <RadzenButton Text="Cancel" Click="() => d.Close(null)" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
        );
    }

    private async Task AddElementDialog(Element parent, Type type)
    {
        string title = $"";
        if (type == typeof(Card)) title += "Card";
        else if (type == typeof(List)) title += "List";
        else if (type == typeof(Board)) title += "Board";

        string name = $"New {title}";

        var result = await DialogService.OpenAsync($"Add new {title}", d =>
    @<RadzenStack Gap="1.5rem">
        <RadzenTextBox @bind-Value="name" />
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Ok" Click="() => {AddElement(parent, type, name); d.Close(null);}" Style="width: 80px;" />
                <RadzenButton Text="Cancel" Click="() => d.Close(null)" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
    );

    }
    #endregion
}
