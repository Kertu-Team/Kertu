@page "/list"
@using Models = Kertu.InteractiveServer.Data.Models.Elements
@using Microsoft.EntityFrameworkCore
@using Data
@inject ApplicationDbContext dbContext

<!-- Include Material Icons -->
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" />

<RadzenStack Gap="1rem">
	<!-- Tasks List Section -->
	<RadzenCard Variant="Variant.Outlined">
		<RadzenText TextStyle="TextStyle.H5" TagName="TagName.H4" class="rz-mb-2">Tasks</RadzenText>
		<RadzenDataList AllowVirtualization="true" Style="height:400px;overflow:auto;"
						Data="@activeTasks" TItem="Models.Card" PageSize="5" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
			<Template Context="task">
				<RadzenCard Variant="Variant.Outlined" class="rz-p-0" Style="width: 100%; overflow: hidden;">
					<RadzenRow Gap="0">
						<RadzenColumn Size="12" SizeLG="3" class="rz-p-4 product-title">
							<RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-color-on-secondary-lighter">@(task.Name)</RadzenText>
						</RadzenColumn>
						<RadzenColumn Size="12" SizeLG="7" class="rz-p-4">
							<!-- Optional additional information here if needed -->
						</RadzenColumn>
						<RadzenColumn Size="12" SizeLG="2" class="rz-p-4">
							<span class="material-symbols-outlined radio-check radio-unchecked"
								  @onclick="() => MarkAsCompleted(task)">radio_button_unchecked</span>
							<span class="material-symbols-outlined radio-check radio-checked">radio_button_checked</span>
						</RadzenColumn>
					</RadzenRow>
				</RadzenCard>
			</Template>
		</RadzenDataList>
	</RadzenCard>

	<!-- Completed Tasks List Section -->
	<RadzenCard Variant="Variant.Outlined">
		<RadzenText TextStyle="TextStyle.H5" TagName="TagName.H4" class="rz-mb-2">Completed Tasks</RadzenText>
		<RadzenDataList AllowVirtualization="true" Style="height:400px;overflow:auto;"
						Data="@completedTasks" TItem="Models.Card" PageSize="5" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
			<Template Context="task">
				<RadzenCard Variant="Variant.Outlined" class="rz-p-0" Style="width: 100%; overflow: hidden;">
					<RadzenRow Gap="0">
						<RadzenColumn Size="12" SizeLG="3" class="rz-p-4 product-title">
							<RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-color-on-secondary-lighter">@(task.Name)</RadzenText>
						</RadzenColumn>
						<RadzenColumn Size="12" SizeLG="7" class="rz-p-4">
							<!-- Optional additional information here if needed -->
						</RadzenColumn>
						<RadzenColumn Size="12" SizeLG="2" class="rz-p-4">
							<!-- Uncheck Icon to Move Task Back to Active -->
							<span class="material-symbols-outlined radio-check"
								  @onclick="() => UnmarkAsCompleted(task)">radio_button_checked</span>
						</RadzenColumn>
					</RadzenRow>
				</RadzenCard>
			</Template>
		</RadzenDataList>
	</RadzenCard>
</RadzenStack>

<style>
	.product-title {
		min-height: 72px;
		background-color: var(--rz-secondary-lighter);
	}

	.radio-check {
		font-size: 24px;
		cursor: pointer;
		transition: opacity 0.3s;
	}

	.radio-unchecked {
		opacity: 1;
	}

	.radio-checked {
		opacity: 0;
		color: var(--rz-primary);
		position: absolute;
	}

	.radio-check:hover .radio-unchecked {
		opacity: 0;
	}

	.radio-check:hover .radio-checked {
		opacity: 1;
	}
</style>

@code {
	List<Models.Card> activeTasks = new();
	List<Models.Card> completedTasks = new();

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		// Fetch and filter tasks based on completion status
		var allTasks = await dbContext.Cards.Where(kc => kc.Name != null).ToListAsync();
		activeTasks = allTasks.Where(t => !t.IsCompleted).ToList();
		completedTasks = allTasks.Where(t => t.IsCompleted).ToList();
	}

	private async Task MarkAsCompleted(Models.Card task)
	{
		// Update the task's completion status
		task.IsCompleted = true;
		dbContext.Cards.Update(task);
		await dbContext.SaveChangesAsync();

		// Refresh the lists
		activeTasks.Remove(task);
		completedTasks.Add(task);
	}

	private async Task UnmarkAsCompleted(Models.Card task)
	{
		// Update the task's completion status
		task.IsCompleted = false;
		dbContext.Cards.Update(task);
		await dbContext.SaveChangesAsync();

		// Refresh the lists
		completedTasks.Remove(task);
		activeTasks.Add(task);
	}
}
